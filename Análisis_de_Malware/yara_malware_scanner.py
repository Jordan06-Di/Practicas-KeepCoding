
import os
import git
import glob
import shutil
import yara
from git import Repo

# Ruta base del proyecto
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Carpeta para guardar los repositorios clonados
REPOS_DIR = os.path.join(BASE_DIR, 'Repos')
RULES_DIR = os.path.join(BASE_DIR, 'all_rules')
COMPILED_RULES_PATH = os.path.join(RULES_DIR, 'rules_compiled')

# Carpeta donde están las muestras de malware a analizar
MALWARE_DIR = '/home/Desktop/yara_automatico/malware'

REPOSITORIES = {
    'capev2': 'https://github.com/kevoreilly/CAPEv2.git',
    'malice': 'https://github.com/malice-plugins/yara.git',
    'jeFF0Falltrades': 'https://github.com/jeFF0Falltrades/YARA-Signatures.git',
    'malpedia': 'https://github.com/malpedia/signator-rules.git',
    'mcafee': 'https://github.com/advanced-threat-research/Yara-Rules.git',
    'florian_roth': 'https://github.com/Neo23x0/signature-base.git',
    'yara_rules': 'https://github.com/Yara-Rules/rules.git',
    'bartblaze': 'https://github.com/bartblaze/Yara-rules.git',
    'h3x2b': 'https://github.com/h3x2b/yara-rules.git',
    'intezer': 'https://github.com/intezer/yara-rules.git',
    'elastic': 'https://github.com/elasticstack/YARA-rules.git',
    'swb': 'https://github.com/securitywithoutborders/yara_rules.git',
    'sentinelone': 'https://github.com/Sentinel-One/YaraHunter-rules.git',
    'revskills': 'https://github.com/revskills/yara-rules.git',
    'trendmicro': 'https://github.com/trendmicro/tmas-yara-rules.git',
    'chksecurity': 'https://github.com/chksecurity/yara-rules.git',
    'google': 'https://github.com/google/malware-detection.git',
    'tenable': 'https://github.com/tenable/yara_rules.git',
    'mht': 'https://github.com/malwarehunterteam/yara-rules.git',
    'hasherezade': 'https://github.com/Hasherezade/yara_rules.git',
    'aress31': 'https://github.com/AresS31/yara-rules.git',
    'remnux': 'https://github.com/remnux/yara-rules.git',
    'paloalto': 'https://github.com/PaloAltoNetworks/yara-rules.git',
    'mikesxrs': 'https://github.com/mikesxrs/Open-Source-YARA-rules.git',
    'threatfoundry': 'https://github.com/threatfoundry/yara-rules.git',
}

def clone_or_pull_repo(name, url):
    """Clona el repositorio si no existe; si existe, realiza pull."""
    repo_path = os.path.join(REPOS_DIR, name)
    if os.path.isdir(repo_path):
        print(f"[+] Actualizando repositorio: {name}")
        Repo(repo_path).remotes.origin.pull()
    else:
        print(f"[+] Clonando repositorio: {name}")
        Repo.clone_from(url, repo_path)

def collect_yara_files():
    """Copia todos los archivos .yar/.yara a la carpeta de reglas unificada."""
    os.makedirs(RULES_DIR, exist_ok=True)
    for root, _, files in os.walk(REPOS_DIR):
        for filename in files:
            if filename.endswith(('.yar', '.yara')):
                source_path = os.path.join(root, filename)
                if filename.endswith('.yara'):
                    filename = filename.replace('.yara', '.yar')
                dest_path = os.path.join(RULES_DIR, filename)
                try:
                    shutil.copy(source_path, dest_path)
                except shutil.SameFileError:
                    continue

def compile_rules():
    """Compila todas las reglas YARA encontradas en un archivo binario."""
    file_dict = {}
    for filepath in glob.glob(os.path.join(RULES_DIR, '*.yar')):
        name = os.path.splitext(os.path.basename(filepath))[0]
        file_dict[name] = filepath
    print("[+] Compilando reglas...")
    rules = yara.compile(filepaths=file_dict)
    rules.save(COMPILED_RULES_PATH)

def scan_malware():
    """Escanea los archivos del directorio de malware usando las reglas compiladas."""
    print("[+] Iniciando análisis de muestras de malware...")
    rules = yara.load(COMPILED_RULES_PATH)
    for filename in os.listdir(MALWARE_DIR):
        filepath = os.path.join(MALWARE_DIR, filename)
        with open(filepath, 'rb') as f:
            matches = rules.match(data=f.read())
            print(f'{filename}: {matches}')

def main():
    print("[*] Iniciando proceso de recolección y compilación de reglas YARA...\n")
    os.makedirs(REPOS_DIR, exist_ok=True)
    for name, url in REPOSITORIES.items():
        clone_or_pull_repo(name, url)
    collect_yara_files()
    compile_rules()
    scan_malware()
    print("\n[✔] Análisis completado.")

if __name__ == '__main__':
    main()
